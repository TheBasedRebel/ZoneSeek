package ZoneSeek.common.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelTriceratops extends ModelBase
{
  //fields
    ModelRenderer Body;
    ModelRenderer Frill1;
    ModelRenderer Head1;
    ModelRenderer Mouth;
    ModelRenderer Nose;
    ModelRenderer Head2;
    ModelRenderer Head3;
    ModelRenderer Head4;
    ModelRenderer HornBase;
    ModelRenderer Horn1A;
    ModelRenderer Horn1B;
    ModelRenderer Chin;
    ModelRenderer Frill2;
    ModelRenderer Frill3;
    ModelRenderer SpikeBase;
    ModelRenderer SpikeBase2;
    ModelRenderer Spike;
    ModelRenderer Spike2;
    ModelRenderer Belly;
    ModelRenderer RightLeg1;
    ModelRenderer RightLeg2;
    ModelRenderer RightLeg3;
    ModelRenderer RightFoot;
    ModelRenderer LeftLeg1;
    ModelRenderer LeftLeg2;
    ModelRenderer LeftLeg3;
    ModelRenderer LeftFoot;
    ModelRenderer RightBackLeg1;
    ModelRenderer RightBackLeg2;
    ModelRenderer RightBackLeg3;
    ModelRenderer RightBackFoot;
    ModelRenderer LeftBackLeg1;
    ModelRenderer LeftBackLeg2;
    ModelRenderer LeftBackLeg3;
    ModelRenderer LeftBackFoot;
    ModelRenderer Spine1;
    ModelRenderer Spine2;
    ModelRenderer Tail1;
    ModelRenderer Tail2;
    ModelRenderer Tail3;
    ModelRenderer Horn2;
    ModelRenderer Horn3;
  
  public ModelTriceratops()
  {
    textureWidth = 256;
    textureHeight = 256;
    
      Body = new ModelRenderer(this, 0, 0);
      Body.addBox(-12F, -11F, 0F, 24, 22, 47);
      Body.setRotationPoint(0F, -3F, 0F);
      Body.setTextureSize(256, 256);
      Body.mirror = true;
      setRotation(Body, 0F, 0F, 0F);
      Frill1 = new ModelRenderer(this, 0, 69);
      Frill1.addBox(-18F, -21F, -4F, 36, 32, 4);
      Frill1.setRotationPoint(0F, -3F, 0F);
      Frill1.setTextureSize(256, 256);
      Frill1.mirror = true;
      setRotation(Frill1, 0F, 0F, 0F);
      Head1 = new ModelRenderer(this, 0, 106);
      Head1.addBox(-13F, -13F, -14F, 26, 24, 10);
      Head1.setRotationPoint(0F, -3F, 0F);
      Head1.setTextureSize(256, 256);
      Head1.mirror = true;
      setRotation(Head1, 0F, 0F, 0F);
      Mouth = new ModelRenderer(this, 0, 141);
      Mouth.addBox(-10F, -5F, -25F, 20, 14, 11);
      Mouth.setRotationPoint(0F, -3F, 0F);
      Mouth.setTextureSize(256, 256);
      Mouth.mirror = true;
      setRotation(Mouth, 0F, 0F, 0F);
      Nose = new ModelRenderer(this, 0, 0);
      Nose.addBox(-7F, -5F, -32F, 14, 14, 7);
      Nose.setRotationPoint(0F, -3F, 0F);
      Nose.setTextureSize(256, 256);
      Nose.mirror = true;
      setRotation(Nose, 0F, 0F, 0F);
      Head2 = new ModelRenderer(this, 0, 22);
      Head2.addBox(-8F, -10F, -16F, 16, 5, 2);
      Head2.setRotationPoint(0F, -3F, 0F);
      Head2.setTextureSize(256, 256);
      Head2.mirror = true;
      setRotation(Head2, 0F, 0F, 0F);
      Head3 = new ModelRenderer(this, 0, 31);
      Head3.addBox(-6F, -8F, -19F, 12, 3, 3);
      Head3.setRotationPoint(0F, -3F, 0F);
      Head3.setTextureSize(256, 256);
      Head3.mirror = true;
      setRotation(Head3, 0F, 0F, 0F);
      Head4 = new ModelRenderer(this, 0, 40);
      Head4.addBox(-4F, -6.8F, -22F, 8, 2, 3);
      Head4.setRotationPoint(0F, -3F, 0F);
      Head4.setTextureSize(256, 256);
      Head4.mirror = true;
      setRotation(Head4, 0F, 0F, 0F);
      HornBase = new ModelRenderer(this, 99, 0);
      HornBase.addBox(-3F, -6F, -32F, 6, 1, 6);
      HornBase.setRotationPoint(0F, -3F, 0F);
      HornBase.setTextureSize(256, 256);
      HornBase.mirror = true;
      setRotation(HornBase, 0F, 0F, 0F);
      Horn1A = new ModelRenderer(this, 100, 9);
      Horn1A.addBox(-1.5F, -15F, -30F, 3, 7, 4);
      Horn1A.setRotationPoint(0F, -3F, 0F);
      Horn1A.setTextureSize(256, 256);
      Horn1A.mirror = true;
      setRotation(Horn1A, 0.1115358F, 0F, 0F);
      Horn1B = new ModelRenderer(this, 100, 24);
      Horn1B.addBox(-1.5F, -18F, -30F, 3, 3, 2);
      Horn1B.setRotationPoint(0F, -3F, 0F);
      Horn1B.setTextureSize(256, 256);
      Horn1B.mirror = true;
      setRotation(Horn1B, 0.111544F, 0F, 0F);
      Chin = new ModelRenderer(this, 0, 169);
      Chin.addBox(-6F, 9F, -31F, 12, 2, 17);
      Chin.setRotationPoint(0F, -3F, 0F);
      Chin.setTextureSize(256, 256);
      Chin.mirror = true;
      setRotation(Chin, 0F, 0F, 0F);
      Frill2 = new ModelRenderer(this, 0, 191);
      Frill2.addBox(0F, -27.6F, -4F, 18, 22, 4);
      Frill2.setRotationPoint(0F, -3F, 0F);
      Frill2.setTextureSize(256, 256);
      Frill2.mirror = true;
      setRotation(Frill2, 0F, 0F, 0.7063936F);
      Frill3 = new ModelRenderer(this, 0, 191);
      Frill3.addBox(-13F, -27.2F, -4F, 18, 22, 4);
      Frill3.setRotationPoint(0F, -3F, 0F);
      Frill3.setTextureSize(256, 256);
      Frill3.mirror = true;
      setRotation(Frill3, 0F, 0F, -0.8922867F);
      SpikeBase = new ModelRenderer(this, 0, 220);
      SpikeBase.addBox(-13F, -26F, -3.5F, 4, 2, 3);
      SpikeBase.setRotationPoint(0F, -3F, 0F);
      SpikeBase.setTextureSize(256, 256);
      SpikeBase.mirror = true;
      setRotation(SpikeBase, 0F, 0F, -0.2974289F);
      SpikeBase2 = new ModelRenderer(this, 0, 220);
      SpikeBase2.addBox(10F, -26F, -3.5F, 4, 2, 3);
      SpikeBase2.setRotationPoint(0F, -3F, 0F);
      SpikeBase2.setTextureSize(256, 256);
      SpikeBase2.mirror = true;
      setRotation(SpikeBase2, 0F, 0F, 0.2602503F);
      Spike = new ModelRenderer(this, 0, 229);
      Spike.addBox(-12.5F, -28F, -3F, 3, 2, 2);
      Spike.setRotationPoint(0F, -3F, 0F);
      Spike.setTextureSize(256, 256);
      Spike.mirror = true;
      setRotation(Spike, 0F, 0F, -0.2974289F);
      Spike2 = new ModelRenderer(this, 0, 229);
      Spike2.addBox(10.5F, -28F, -3F, 3, 2, 2);
      Spike2.setRotationPoint(0F, -3F, 0F);
      Spike2.setTextureSize(256, 256);
      Spike2.mirror = true;
      setRotation(Spike2, 0F, 0F, 0.2602503F);
      Belly = new ModelRenderer(this, 128, 0);
      Belly.addBox(-10F, 11F, 1F, 20, 2, 44);
      Belly.setRotationPoint(0F, -3F, 0F);
      Belly.setTextureSize(256, 256);
      Belly.mirror = true;
      setRotation(Belly, 0F, 0F, 0F);
      RightLeg1 = new ModelRenderer(this, 83, 71);
      RightLeg1.addBox(-0.5F, -6.5F, -6.5F, 7, 13, 13);
      RightLeg1.setRotationPoint(11F, 3F, 10F);
      RightLeg1.setTextureSize(256, 256);
      RightLeg1.mirror = true;
      setRotation(RightLeg1, -0.1487144F, 0F, 0F);
      RightLeg2 = new ModelRenderer(this, 84, 99);
      RightLeg2.addBox(0F, 5F, -5F, 6, 8, 10);
      RightLeg2.setRotationPoint(11F, 3F, 10F);
      RightLeg2.setTextureSize(256, 256);
      RightLeg2.mirror = true;
      setRotation(RightLeg2, -0.1487144F, 0F, 0F);
      RightLeg3 = new ModelRenderer(this, 84, 99);
      RightLeg3.addBox(0F, 11F, -8.5F, 6, 8, 10);
      RightLeg3.setRotationPoint(11F, 3F, 10F);
      RightLeg3.setTextureSize(256, 256);
      RightLeg3.mirror = true;
      setRotation(RightLeg3, 0.1487144F, 0F, 0F);
      RightFoot = new ModelRenderer(this, 78, 120);
      RightFoot.addBox(-1F, 18F, -10.5F, 8, 3, 15);
      RightFoot.setRotationPoint(11F, 3F, 10F);
      RightFoot.setTextureSize(256, 256);
      RightFoot.mirror = true;
      setRotation(RightFoot, 0F, 0F, 0F);
      LeftLeg1 = new ModelRenderer(this, 83, 71);
      LeftLeg1.addBox(-6.5F, -6.5F, -6.5F, 7, 13, 13);
      LeftLeg1.setRotationPoint(-11F, 3F, 10F);
      LeftLeg1.setTextureSize(256, 256);
      LeftLeg1.mirror = true;
      setRotation(LeftLeg1, -0.1487144F, 0F, 0F);
      LeftLeg2 = new ModelRenderer(this, 84, 99);
      LeftLeg2.addBox(-6F, 5F, -5F, 6, 8, 10);
      LeftLeg2.setRotationPoint(-11F, 3F, 10F);
      LeftLeg2.setTextureSize(256, 256);
      LeftLeg2.mirror = true;
      setRotation(LeftLeg2, -0.1487144F, 0F, 0F);
      LeftLeg3 = new ModelRenderer(this, 84, 99);
      LeftLeg3.addBox(-6F, 11F, -8.5F, 6, 8, 10);
      LeftLeg3.setRotationPoint(-11F, 3F, 10F);
      LeftLeg3.setTextureSize(256, 256);
      LeftLeg3.mirror = true;
      setRotation(LeftLeg3, 0.1487144F, 0F, 0F);
      LeftFoot = new ModelRenderer(this, 78, 120);
      LeftFoot.addBox(-7F, 18F, -10F, 8, 3, 15);
      LeftFoot.setRotationPoint(-11F, 3F, 10F);
      LeftFoot.setTextureSize(256, 256);
      LeftFoot.mirror = true;
      setRotation(LeftFoot, 0F, 0F, 0F);
      RightBackLeg1 = new ModelRenderer(this, 127, 71);
      RightBackLeg1.addBox(-0.5F, -8F, -8F, 7, 16, 16);
      RightBackLeg1.setRotationPoint(11F, 3F, 36F);
      RightBackLeg1.setTextureSize(256, 256);
      RightBackLeg1.mirror = true;
      setRotation(RightBackLeg1, -0.0743572F, 0F, 0F);
      RightBackLeg2 = new ModelRenderer(this, 128, 106);
      RightBackLeg2.addBox(0F, 8F, -6F, 6, 7, 12);
      RightBackLeg2.setRotationPoint(11F, 3F, 36F);
      RightBackLeg2.setTextureSize(256, 256);
      RightBackLeg2.mirror = true;
      setRotation(RightBackLeg2, -0.074351F, 0F, 0F);
      RightBackLeg3 = new ModelRenderer(this, 126, 128);
      RightBackLeg3.addBox(0F, 14F, -8F, 6, 6, 12);
      RightBackLeg3.setRotationPoint(11F, 3F, 36F);
      RightBackLeg3.setTextureSize(256, 256);
      RightBackLeg3.mirror = true;
      setRotation(RightBackLeg3, 0.074351F, 0F, 0F);
      RightBackFoot = new ModelRenderer(this, 78, 149);
      RightBackFoot.addBox(-1F, 17F, -12F, 8, 4, 18);
      RightBackFoot.setRotationPoint(11F, 3F, 36F);
      RightBackFoot.setTextureSize(256, 256);
      RightBackFoot.mirror = true;
      setRotation(RightBackFoot, 0F, 0F, 0F);
      LeftBackLeg1 = new ModelRenderer(this, 127, 71);
      LeftBackLeg1.addBox(-6.5F, -8F, -8F, 7, 16, 16);
      LeftBackLeg1.setRotationPoint(-11F, 3F, 36F);
      LeftBackLeg1.setTextureSize(256, 256);
      LeftBackLeg1.mirror = true;
      setRotation(LeftBackLeg1, -0.0743572F, 0F, 0F);
      LeftBackLeg2 = new ModelRenderer(this, 128, 106);
      LeftBackLeg2.addBox(-6F, 8F, -6F, 6, 7, 12);
      LeftBackLeg2.setRotationPoint(-11F, 3F, 36F);
      LeftBackLeg2.setTextureSize(256, 256);
      LeftBackLeg2.mirror = true;
      setRotation(LeftBackLeg2, -0.074351F, 0F, 0F);
      LeftBackLeg3 = new ModelRenderer(this, 126, 128);
      LeftBackLeg3.addBox(-6F, 14F, -8F, 6, 6, 12);
      LeftBackLeg3.setRotationPoint(-11F, 3F, 36F);
      LeftBackLeg3.setTextureSize(256, 256);
      LeftBackLeg3.mirror = true;
      setRotation(LeftBackLeg3, 0.074351F, 0F, 0F);
      LeftBackFoot = new ModelRenderer(this, 78, 149);
      LeftBackFoot.addBox(-8F, 17F, -12F, 8, 4, 18);
      LeftBackFoot.setRotationPoint(-11F, 3F, 36F);
      LeftBackFoot.setTextureSize(256, 256);
      LeftBackFoot.mirror = true;
      setRotation(LeftBackFoot, 0F, 0F, 0F);
      Spine1 = new ModelRenderer(this, 11, 197);
      Spine1.addBox(-1F, -12F, 2F, 2, 1, 43);
      Spine1.setRotationPoint(0F, -3F, 0F);
      Spine1.setTextureSize(256, 256);
      Spine1.mirror = true;
      setRotation(Spine1, 0F, 0F, 0F);
      Spine2 = new ModelRenderer(this, 68, 197);
      Spine2.addBox(-1F, -13F, 9F, 2, 1, 27);
      Spine2.setRotationPoint(0F, -3F, 0F);
      Spine2.setTextureSize(256, 256);
      Spine2.mirror = true;
      setRotation(Spine2, 0F, 0F, 0F);
      Tail1 = new ModelRenderer(this, 177, 49);
      Tail1.addBox(-10F, -7.5F, 0F, 20, 15, 9);
      Tail1.setRotationPoint(0F, -5F, 47F);
      Tail1.setTextureSize(256, 256);
      Tail1.mirror = true;
      setRotation(Tail1, 0F, 0F, 0F);
      Tail2 = new ModelRenderer(this, 177, 76);
      Tail2.addBox(-7.5F, -5.5F, 0F, 15, 11, 9);
      Tail2.setRotationPoint(0F, -6F, 56F);
      Tail2.setTextureSize(256, 256);
      Tail2.mirror = true;
      setRotation(Tail2, 0F, 0F, 0F);
      Tail3 = new ModelRenderer(this, 177, 99);
      Tail3.addBox(-5.5F, -3.5F, 0F, 11, 7, 8);
      Tail3.setRotationPoint(0F, -6F, 65F);
      Tail3.setTextureSize(256, 256);
      Tail3.mirror = true;
      setRotation(Tail3, 0F, 0F, 0F);
      Horn2 = new ModelRenderer(this, 150, 52);
      Horn2.addBox(7F, -26F, -7F, 3, 10, 3);
      Horn2.setRotationPoint(0F, -3F, 0F);
      Horn2.setTextureSize(256, 256);
      Horn2.mirror = true;
      setRotation(Horn2, 0.3717861F, 0F, 0.2230717F);
      Horn3 = new ModelRenderer(this, 150, 52);
      Horn3.addBox(-9F, -26F, -7F, 3, 10, 3);
      Horn3.setRotationPoint(0F, -3F, 0F);
      Horn3.setTextureSize(256, 256);
      Horn3.mirror = true;
      setRotation(Horn3, 0.3717822F, 0F, -0.2602491F);
  }
  
  public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7)
  {
    super.render(par1Entity, par2, par3, par4, par5, par6, par7);
    setRotationAngles(par2, par3, par4, par5, par6, par7, par1Entity);
    Body.render(par7);
    Frill1.render(par7);
    Head1.render(par7);
    Mouth.render(par7);
    Nose.render(par7);
    Head2.render(par7);
    Head3.render(par7);
    Head4.render(par7);
    HornBase.render(par7);
    Horn1A.render(par7);
    Horn1B.render(par7);
    Chin.render(par7);
    Frill2.render(par7);
    Frill3.render(par7);
    SpikeBase.render(par7);
    SpikeBase2.render(par7);
    Spike.render(par7);
    Spike2.render(par7);
    Belly.render(par7);
    RightLeg1.render(par7);
    RightLeg2.render(par7);
    RightLeg3.render(par7);
    RightFoot.render(par7);
    LeftLeg1.render(par7);
    LeftLeg2.render(par7);
    LeftLeg3.render(par7);
    LeftFoot.render(par7);
    RightBackLeg1.render(par7);
    RightBackLeg2.render(par7);
    RightBackLeg3.render(par7);
    RightBackFoot.render(par7);
    LeftBackLeg1.render(par7);
    LeftBackLeg2.render(par7);
    LeftBackLeg3.render(par7);
    LeftBackFoot.render(par7);
    Spine1.render(par7);
    Spine2.render(par7);
    Tail1.render(par7);
    Tail2.render(par7);
    Tail3.render(par7);
    Horn2.render(par7);
    Horn3.render(par7);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity)
  {
	  /**
      this.Frill1.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Frill1.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Head1.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Head1.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Mouth.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Mouth.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Nose.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Nose.rotateAngleY = par4 / (180F / (float)Math.PI);
      
      this.Head2.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Head2.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Head3.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Head3.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Head4.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Head4.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.HornBase.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.HornBase.rotateAngleY = par4 / (180F / (float)Math.PI);
      
      this.Horn1A.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Horn1A.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Horn1B.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Horn1B.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Chin.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Chin.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Frill2.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Frill2.rotateAngleY = par4 / (180F / (float)Math.PI);
      
      this.Frill3.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Frill3.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.SpikeBase.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.SpikeBase.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.SpikeBase2.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.SpikeBase2.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Spike.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Spike.rotateAngleY = par4 / (180F / (float)Math.PI);
      
      this.Spike2.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Spike2.rotateAngleY = par4 / (180F / (float)Math.PI);
      
      this.Horn2.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Horn2.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Horn3.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Horn3.rotateAngleY = par4 / (180F / (float)Math.PI);
      **/
      this.RightLeg1.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
      this.RightLeg2.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
      this.RightLeg3.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
      this.RightFoot.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
      
      this.LeftLeg1.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
      this.LeftLeg2.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
      this.LeftLeg3.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
      this.LeftFoot.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
      
      this.RightBackLeg1.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
      this.RightBackLeg2.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
      this.RightBackLeg3.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
      this.RightBackFoot.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
      
      this.LeftBackLeg1.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
      this.LeftBackLeg2.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
      this.LeftBackLeg3.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
      this.LeftBackFoot.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
      
      this.Tail1.rotateAngleY = onGround * 0.25F;
      this.Tail2.rotationPointZ = this.Tail1.rotationPointZ + (float)Math.cos(this.Tail1.rotateAngleY)*5;
      this.Tail2.rotationPointX = this.Tail1.rotationPointX + (float)Math.sin(this.Tail1.rotateAngleY)*5;
      this.Tail2.rotateAngleY = onGround * 0.5F;
      this.Tail3.rotationPointZ = this.Tail2.rotationPointZ + (float)Math.cos(this.Tail2.rotateAngleY)*8;
      this.Tail3.rotationPointX = this.Tail2.rotationPointX + (float)Math.sin(this.Tail2.rotateAngleY)*8;
      this.Tail3.rotateAngleY = onGround * 0.75F;

      
  }

}
