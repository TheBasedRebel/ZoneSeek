// Waaaaaazzzzzupppp!
package ZoneSeek.common.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelLagoonSlug extends ModelBase
{
  //fields
    ModelRenderer Segment_1;
    ModelRenderer Segment_2;
    ModelRenderer Segment_3;
    ModelRenderer Segment_4;
    ModelRenderer Segment_5;
    ModelRenderer Segment_6;
    ModelRenderer Tail_Middle;
    ModelRenderer Tail_End_1;
    ModelRenderer Tail_End_2;
    ModelRenderer Tail_End_3;
    ModelRenderer Spike_1;
    ModelRenderer Spike_2;
    ModelRenderer Spike_3;
    ModelRenderer Spike_4;
    ModelRenderer Spike_5;
    ModelRenderer Spike_6;
    ModelRenderer Bottom_Lip;
    ModelRenderer Tooth_Left_B;
    ModelRenderer Tooth_Leftt_M;
    ModelRenderer Tooth_Left_T;
    ModelRenderer Tooth_BR;
    ModelRenderer Tooth_BNR;
    ModelRenderer Tooth_BNL;
    ModelRenderer Tooth_BL;
    ModelRenderer Tooth_Right_B;
    ModelRenderer Tooth_Right_M;
    ModelRenderer Tooth_Right_T;
    ModelRenderer Tooth_TR;
    ModelRenderer Tooth_TNR;
    ModelRenderer Tooth_TNL;
    ModelRenderer Tooth_TL;
    ModelRenderer Left_Gum;
    ModelRenderer Right_Gum;
    ModelRenderer Bottom_Gum;
    ModelRenderer Upper_Gum;
    ModelRenderer Throat;
    ModelRenderer Top_Lip;
    ModelRenderer Right_Eye;
    ModelRenderer Left_Eye;
    ModelRenderer Right_Lip;
    ModelRenderer Right_Cheek;
    ModelRenderer Left_Cheek;
    ModelRenderer Top_Cheek;
    ModelRenderer Head;
    ModelRenderer Bottom_Left_Corner;
    ModelRenderer Bottom_Right_Corner;
    ModelRenderer Top_Right_Corner;
    ModelRenderer Top_Left_Corner;
    ModelRenderer Bottom_Chunk;
    ModelRenderer Right_Chunk;
    ModelRenderer Left_Chunk;
    ModelRenderer Top_Chunk;
    ModelRenderer Left_Lip;
    ModelRenderer TL_Corner_Lip;
    ModelRenderer TR_Corner_Lip;
    ModelRenderer BL_Corner_Lip;
    ModelRenderer BR_Corner_Lip;
  
  public ModelLagoonSlug()
  {
    textureWidth = 128;
    textureHeight = 128;
    
      Segment_1 = new ModelRenderer(this, 0, 64);
      Segment_1.addBox(-7F, -7F, 0F, 14, 14, 4);
      Segment_1.setRotationPoint(0F, 17F, 5F);
      Segment_1.setTextureSize(128, 128);
      Segment_1.mirror = true;
      setRotation(Segment_1, 0F, 0F, 0F);
      Segment_2 = new ModelRenderer(this, 37, 64);
      Segment_2.addBox(-6F, -6F, 0F, 12, 12, 4);
      Segment_2.setRotationPoint(0F, 18F, 9F);
      Segment_2.setTextureSize(128, 128);
      Segment_2.mirror = true;
      setRotation(Segment_2, 0F, 0F, 0F);
      Segment_3 = new ModelRenderer(this, 70, 64);
      Segment_3.addBox(-5F, -5F, 0F, 10, 10, 4);
      Segment_3.setRotationPoint(0F, 19F, 13F);
      Segment_3.setTextureSize(128, 128);
      Segment_3.mirror = true;
      setRotation(Segment_3, 0F, 0F, 0F);
      Segment_4 = new ModelRenderer(this, 99, 64);
      Segment_4.addBox(-4F, -4F, 0F, 8, 8, 4);
      Segment_4.setRotationPoint(0F, 20F, 17F);
      Segment_4.setTextureSize(128, 128);
      Segment_4.mirror = true;
      setRotation(Segment_4, 0F, 0F, 0F);
      Segment_5 = new ModelRenderer(this, 99, 77);
      Segment_5.addBox(-3F, -3F, 0F, 6, 6, 4);
      Segment_5.setRotationPoint(0F, 21F, 21F);
      Segment_5.setTextureSize(128, 128);
      Segment_5.mirror = true;
      setRotation(Segment_5, 0F, 0F, 0F);
      Segment_6 = new ModelRenderer(this, 82, 79);
      Segment_6.addBox(-2F, -2F, 0F, 4, 4, 4);
      Segment_6.setRotationPoint(0F, 22F, 25F);
      Segment_6.setTextureSize(128, 128);
      Segment_6.mirror = true;
      setRotation(Segment_6, 0F, 0F, 0F);
      Tail_Middle = new ModelRenderer(this, 67, 81);
      Tail_Middle.addBox(-1F, -1F, 0F, 2, 2, 5);
      Tail_Middle.setRotationPoint(0F, 23F, 29F);
      Tail_Middle.setTextureSize(128, 128);
      Tail_Middle.mirror = true;
      setRotation(Tail_Middle, 0F, 0F, 0F);
      Tail_End_1 = new ModelRenderer(this, 56, 82);
      Tail_End_1.addBox(-2F, -2F, 5F, 4, 3, 1);
      Tail_End_1.setRotationPoint(0F, 23F, 29F);
      Tail_End_1.setTextureSize(128, 128);
      Tail_End_1.mirror = true;
      setRotation(Tail_End_1, 0F, 0F, 0F);
      Tail_End_2 = new ModelRenderer(this, 82, 88);
      Tail_End_2.addBox(-2F, -3F, 6F, 4, 4, 4);
      Tail_End_2.setRotationPoint(0F, 23F, 29F);
      Tail_End_2.setTextureSize(128, 128);
      Tail_End_2.mirror = true;
      setRotation(Tail_End_2, 0F, 0F, 0F);
      Tail_End_3 = new ModelRenderer(this, 56, 82);
      Tail_End_3.addBox(-2F, -2F, 10F, 4, 3, 1);
      Tail_End_3.setRotationPoint(0F, 23F, 29F);
      Tail_End_3.setTextureSize(128, 128);
      Tail_End_3.mirror = true;
      setRotation(Tail_End_3, 0F, 0F, 0F);
      Spike_1 = new ModelRenderer(this, 49, 0);
      Spike_1.addBox(-1F, -13F, 1F, 2, 6, 2);
      Spike_1.setRotationPoint(0F, 17F, 5F);
      Spike_1.setTextureSize(128, 128);
      Spike_1.mirror = true;
      setRotation(Spike_1, 0F, 0F, 0F);
      Spike_2 = new ModelRenderer(this, 49, 0);
      Spike_2.addBox(-1F, -12F, 1F, 2, 6, 2);
      Spike_2.setRotationPoint(0F, 18F, 9F);
      Spike_2.setTextureSize(128, 128);
      Spike_2.mirror = true;
      setRotation(Spike_2, 0F, 0F, 0F);
      Spike_3 = new ModelRenderer(this, 49, 0);
      Spike_3.addBox(-1F, -11F, 1F, 2, 6, 2);
      Spike_3.setRotationPoint(0F, 19F, 13F);
      Spike_3.setTextureSize(128, 128);
      Spike_3.mirror = true;
      setRotation(Spike_3, 0F, 0F, 0F);
      Spike_4 = new ModelRenderer(this, 49, 0);
      Spike_4.addBox(-1F, -10F, 1F, 2, 6, 2);
      Spike_4.setRotationPoint(0F, 20F, 17F);
      Spike_4.setTextureSize(128, 128);
      Spike_4.mirror = true;
      setRotation(Spike_4, 0F, 0F, 0F);
      Spike_5 = new ModelRenderer(this, 49, 0);
      Spike_5.addBox(-1F, -9F, 1F, 2, 6, 2);
      Spike_5.setRotationPoint(0F, 21F, 21F);
      Spike_5.setTextureSize(128, 128);
      Spike_5.mirror = true;
      setRotation(Spike_5, 0F, 0F, 0F);
      Spike_6 = new ModelRenderer(this, 49, 0);
      Spike_6.addBox(-1F, -8F, 1F, 2, 6, 2);
      Spike_6.setRotationPoint(0F, 22F, 25F);
      Spike_6.setTextureSize(128, 128);
      Spike_6.mirror = true;
      setRotation(Spike_6, 0F, 0F, 0F);
      Bottom_Lip = new ModelRenderer(this, 0, 12);
      Bottom_Lip.addBox(-6F, 6F, -3F, 12, 1, 1);
      Bottom_Lip.setRotationPoint(0F, 16F, 0F);
      Bottom_Lip.setTextureSize(128, 128);
      Bottom_Lip.mirror = true;
      setRotation(Bottom_Lip, 0F, 0F, 0F);
      Tooth_Left_B = new ModelRenderer(this, 22, 3);
      Tooth_Left_B.addBox(-5F, 2F, -1.5F, 1, 1, 1);
      Tooth_Left_B.setRotationPoint(0F, 16F, 0F);
      Tooth_Left_B.setTextureSize(128, 128);
      Tooth_Left_B.mirror = true;
      setRotation(Tooth_Left_B, 0F, 0F, 0F);
      Tooth_Leftt_M = new ModelRenderer(this, 22, 3);
      Tooth_Leftt_M.addBox(-5F, -0.5F, -1.5F, 1, 1, 1);
      Tooth_Leftt_M.setRotationPoint(0F, 16F, 0F);
      Tooth_Leftt_M.setTextureSize(128, 128);
      Tooth_Leftt_M.mirror = true;
      setRotation(Tooth_Leftt_M, 0F, 0F, 0F);
      Tooth_Left_T = new ModelRenderer(this, 22, 3);
      Tooth_Left_T.addBox(-5F, -3F, -1.5F, 1, 1, 1);
      Tooth_Left_T.setRotationPoint(0F, 16F, 0F);
      Tooth_Left_T.setTextureSize(128, 128);
      Tooth_Left_T.mirror = true;
      setRotation(Tooth_Left_T, 0F, 0F, 0F);
      Tooth_BR = new ModelRenderer(this, 22, 3);
      Tooth_BR.addBox(3F, 4F, -1.5F, 1, 1, 1);
      Tooth_BR.setRotationPoint(0F, 16F, 0F);
      Tooth_BR.setTextureSize(128, 128);
      Tooth_BR.mirror = true;
      setRotation(Tooth_BR, 0F, 0F, 0F);
      Tooth_BNR = new ModelRenderer(this, 22, 3);
      Tooth_BNR.addBox(1F, 4F, -1.5F, 1, 1, 1);
      Tooth_BNR.setRotationPoint(0F, 16F, 0F);
      Tooth_BNR.setTextureSize(128, 128);
      Tooth_BNR.mirror = true;
      setRotation(Tooth_BNR, 0F, 0F, 0F);
      Tooth_BNL = new ModelRenderer(this, 22, 3);
      Tooth_BNL.addBox(-2F, 4F, -1.5F, 1, 1, 1);
      Tooth_BNL.setRotationPoint(0F, 16F, 0F);
      Tooth_BNL.setTextureSize(128, 128);
      Tooth_BNL.mirror = true;
      setRotation(Tooth_BNL, 0F, 0F, 0F);
      Tooth_BL = new ModelRenderer(this, 22, 3);
      Tooth_BL.addBox(-4F, 4F, -1.5F, 1, 1, 1);
      Tooth_BL.setRotationPoint(0F, 16F, 0F);
      Tooth_BL.setTextureSize(128, 128);
      Tooth_BL.mirror = true;
      setRotation(Tooth_BL, 0F, 0F, 0F);
      Tooth_Right_B = new ModelRenderer(this, 22, 3);
      Tooth_Right_B.addBox(4F, 2F, -1.5F, 1, 1, 1);
      Tooth_Right_B.setRotationPoint(0F, 16F, 0F);
      Tooth_Right_B.setTextureSize(128, 128);
      Tooth_Right_B.mirror = true;
      setRotation(Tooth_Right_B, 0F, 0F, 0F);
      Tooth_Right_M = new ModelRenderer(this, 22, 3);
      Tooth_Right_M.addBox(4F, -0.5F, -1.5F, 1, 1, 1);
      Tooth_Right_M.setRotationPoint(0F, 16F, 0F);
      Tooth_Right_M.setTextureSize(128, 128);
      Tooth_Right_M.mirror = true;
      setRotation(Tooth_Right_M, 0F, 0F, 0F);
      Tooth_Right_T = new ModelRenderer(this, 22, 3);
      Tooth_Right_T.addBox(4F, -3F, -1.5F, 1, 1, 1);
      Tooth_Right_T.setRotationPoint(0F, 16F, 0F);
      Tooth_Right_T.setTextureSize(128, 128);
      Tooth_Right_T.mirror = true;
      setRotation(Tooth_Right_T, 0F, 0F, 0F);
      Tooth_TR = new ModelRenderer(this, 22, 3);
      Tooth_TR.addBox(3F, -5F, -1.5F, 1, 1, 1);
      Tooth_TR.setRotationPoint(0F, 16F, 0F);
      Tooth_TR.setTextureSize(128, 128);
      Tooth_TR.mirror = true;
      setRotation(Tooth_TR, 0F, 0F, 0F);
      Tooth_TNR = new ModelRenderer(this, 22, 3);
      Tooth_TNR.addBox(1F, -5F, -1.5F, 1, 1, 1);
      Tooth_TNR.setRotationPoint(0F, 16F, 0F);
      Tooth_TNR.setTextureSize(128, 128);
      Tooth_TNR.mirror = true;
      setRotation(Tooth_TNR, 0F, 0F, 0F);
      Tooth_TNL = new ModelRenderer(this, 22, 3);
      Tooth_TNL.addBox(-2F, -5F, -1.5F, 1, 1, 1);
      Tooth_TNL.setRotationPoint(0F, 16F, 0F);
      Tooth_TNL.setTextureSize(128, 128);
      Tooth_TNL.mirror = true;
      setRotation(Tooth_TNL, 0F, 0F, 0F);
      Tooth_TL = new ModelRenderer(this, 22, 3);
      Tooth_TL.addBox(-4F, -5F, -1.5F, 1, 1, 1);
      Tooth_TL.setRotationPoint(0F, 16F, 0F);
      Tooth_TL.setTextureSize(128, 128);
      Tooth_TL.mirror = true;
      setRotation(Tooth_TL, 0F, 0F, 0F);
      Left_Gum = new ModelRenderer(this, 21, 0);
      Left_Gum.addBox(-5F, -6F, -2F, 10, 1, 1);
      Left_Gum.setRotationPoint(0F, 16F, 0F);
      Left_Gum.setTextureSize(128, 128);
      Left_Gum.mirror = true;
      setRotation(Left_Gum, 0F, 0F, -1.570796F);
      Right_Gum = new ModelRenderer(this, 22, 0);
      Right_Gum.addBox(-5F, -6F, -2F, 10, 1, 1);
      Right_Gum.setRotationPoint(0F, 16F, 0F);
      Right_Gum.setTextureSize(128, 128);
      Right_Gum.mirror = true;
      setRotation(Right_Gum, 0F, 0F, 1.570796F);
      Bottom_Gum = new ModelRenderer(this, 22, 0);
      Bottom_Gum.addBox(-5F, -6F, -2F, 10, 1, 1);
      Bottom_Gum.setRotationPoint(0F, 16F, 0F);
      Bottom_Gum.setTextureSize(128, 128);
      Bottom_Gum.mirror = true;
      setRotation(Bottom_Gum, 0F, 0F, 3.141593F);
      Upper_Gum = new ModelRenderer(this, 22, 0);
      Upper_Gum.addBox(-5F, -6F, -2F, 10, 1, 1);
      Upper_Gum.setRotationPoint(0F, 16F, 0F);
      Upper_Gum.setTextureSize(128, 128);
      Upper_Gum.mirror = true;
      setRotation(Upper_Gum, 0F, 0F, 0F);
      Throat = new ModelRenderer(this, 0, 0);
      Throat.addBox(-5F, -5F, -1F, 10, 10, 1);
      Throat.setRotationPoint(0F, 16F, 0F);
      Throat.setTextureSize(128, 128);
      Throat.mirror = true;
      setRotation(Throat, 0F, 0F, 0F);
      Top_Lip = new ModelRenderer(this, 0, 12);
      Top_Lip.addBox(-6F, -7F, -3F, 12, 1, 1);
      Top_Lip.setRotationPoint(0F, 16F, 0F);
      Top_Lip.setTextureSize(128, 128);
      Top_Lip.mirror = true;
      setRotation(Top_Lip, 0F, 0F, 0F);
      Right_Eye = new ModelRenderer(this, 31, 6);
      Right_Eye.addBox(-1.5F, -2F, -0.5F, 3, 2, 1);
      Right_Eye.setRotationPoint(3F, 7F, 4.5F);
      Right_Eye.setTextureSize(128, 128);
      Right_Eye.mirror = true;
      setRotation(Right_Eye, 0F, 0F, 0F);
      Left_Eye = new ModelRenderer(this, 31, 6);
      Left_Eye.addBox(-1.5F, -2F, -0.5F, 3, 2, 1);
      Left_Eye.setRotationPoint(-3F, 7F, 4.5F);
      Left_Eye.setTextureSize(128, 128);
      Left_Eye.mirror = true;
      setRotation(Left_Eye, 0F, 0F, 0F);
      Right_Lip = new ModelRenderer(this, 0, 12);
      Right_Lip.addBox(-6F, -7F, -3F, 12, 1, 1);
      Right_Lip.setRotationPoint(0F, 16F, 0F);
      Right_Lip.setTextureSize(128, 128);
      Right_Lip.mirror = true;
      setRotation(Right_Lip, 0F, 0F, 1.570796F);
      Right_Cheek = new ModelRenderer(this, 7, 49);
      Right_Cheek.addBox(8F, -6F, 3F, 1, 12, 2);
      Right_Cheek.setRotationPoint(0F, 16F, 0F);
      Right_Cheek.setTextureSize(128, 128);
      Right_Cheek.mirror = true;
      setRotation(Right_Cheek, 0F, 0F, 0F);
      Left_Cheek = new ModelRenderer(this, 0, 49);
      Left_Cheek.addBox(-9F, -6F, 3F, 1, 12, 2);
      Left_Cheek.setRotationPoint(0F, 16F, 0F);
      Left_Cheek.setTextureSize(128, 128);
      Left_Cheek.mirror = true;
      setRotation(Left_Cheek, 0F, 0F, 0F);
      Top_Cheek = new ModelRenderer(this, 0, 45);
      Top_Cheek.addBox(-6F, -9F, 3F, 12, 1, 2);
      Top_Cheek.setRotationPoint(0F, 16F, 0F);
      Top_Cheek.setTextureSize(128, 128);
      Top_Cheek.mirror = true;
      setRotation(Top_Cheek, 0F, 0F, 0F);
      Head = new ModelRenderer(this, 24, 25);
      Head.addBox(-8F, -8F, 2F, 16, 16, 3);
      Head.setRotationPoint(0F, 16F, 0F);
      Head.setTextureSize(128, 128);
      Head.mirror = true;
      setRotation(Head, 0F, 0F, 0F);
      Bottom_Left_Corner = new ModelRenderer(this, 22, 6);
      Bottom_Left_Corner.addBox(-7F, 6F, 0F, 1, 1, 2);
      Bottom_Left_Corner.setRotationPoint(0F, 16F, 0F);
      Bottom_Left_Corner.setTextureSize(128, 128);
      Bottom_Left_Corner.mirror = true;
      setRotation(Bottom_Left_Corner, 0F, 0F, 0F);
      Bottom_Right_Corner = new ModelRenderer(this, 22, 6);
      Bottom_Right_Corner.addBox(6F, 6F, 0F, 1, 1, 2);
      Bottom_Right_Corner.setRotationPoint(0F, 16F, 0F);
      Bottom_Right_Corner.setTextureSize(128, 128);
      Bottom_Right_Corner.mirror = true;
      setRotation(Bottom_Right_Corner, 0F, 0F, 0F);
      Top_Right_Corner = new ModelRenderer(this, 22, 6);
      Top_Right_Corner.addBox(6F, -8F, 0F, 1, 1, 2);
      Top_Right_Corner.setRotationPoint(0F, 17F, 0F);
      Top_Right_Corner.setTextureSize(128, 128);
      Top_Right_Corner.mirror = true;
      setRotation(Top_Right_Corner, 0F, 0F, 0F);
      Top_Left_Corner = new ModelRenderer(this, 22, 6);
      Top_Left_Corner.addBox(-7F, -7F, 0F, 1, 1, 2);
      Top_Left_Corner.setRotationPoint(0F, 16F, 0F);
      Top_Left_Corner.setTextureSize(128, 128);
      Top_Left_Corner.mirror = true;
      setRotation(Top_Left_Corner, 0F, 0F, 0F);
      Bottom_Chunk = new ModelRenderer(this, 32, 18);
      Bottom_Chunk.addBox(-6F, 6F, -2F, 12, 2, 4);
      Bottom_Chunk.setRotationPoint(0F, 16F, 0F);
      Bottom_Chunk.setTextureSize(128, 128);
      Bottom_Chunk.mirror = true;
      setRotation(Bottom_Chunk, 0F, 0F, 0F);
      Right_Chunk = new ModelRenderer(this, 12, 25);
      Right_Chunk.addBox(6F, -6F, -2F, 2, 12, 4);
      Right_Chunk.setRotationPoint(0F, 16F, 0F);
      Right_Chunk.setTextureSize(128, 128);
      Right_Chunk.mirror = true;
      setRotation(Right_Chunk, 0F, 0F, 0F);
      Left_Chunk = new ModelRenderer(this, 0, 25);
      Left_Chunk.addBox(-8F, -6F, -2F, 2, 12, 4);
      Left_Chunk.setRotationPoint(0F, 16F, 0F);
      Left_Chunk.setTextureSize(128, 128);
      Left_Chunk.mirror = true;
      setRotation(Left_Chunk, 0F, 0F, 0F);
      Top_Chunk = new ModelRenderer(this, 0, 18);
      Top_Chunk.addBox(-6F, -8F, -2F, 12, 2, 4);
      Top_Chunk.setRotationPoint(0F, 16F, 0F);
      Top_Chunk.setTextureSize(128, 128);
      Top_Chunk.mirror = true;
      setRotation(Top_Chunk, 0F, 0F, 0F);
      Left_Lip = new ModelRenderer(this, 0, 12);
      Left_Lip.addBox(-6F, -7F, -3F, 12, 1, 1);
      Left_Lip.setRotationPoint(0F, 16F, 0F);
      Left_Lip.setTextureSize(128, 128);
      Left_Lip.mirror = true;
      setRotation(Left_Lip, 0F, 0F, -1.570796F);
      TL_Corner_Lip = new ModelRenderer(this, 0, 15);
      TL_Corner_Lip.addBox(-6F, -6F, -3F, 1, 1, 1);
      TL_Corner_Lip.setRotationPoint(0F, 16F, 0F);
      TL_Corner_Lip.setTextureSize(128, 128);
      TL_Corner_Lip.mirror = true;
      setRotation(TL_Corner_Lip, 0F, 0F, 0F);
      TR_Corner_Lip = new ModelRenderer(this, 0, 15);
      TR_Corner_Lip.addBox(5F, -7F, -3F, 1, 1, 1);
      TR_Corner_Lip.setRotationPoint(0F, 17F, 0F);
      TR_Corner_Lip.setTextureSize(128, 128);
      TR_Corner_Lip.mirror = true;
      setRotation(TR_Corner_Lip, 0F, 0F, 0F);
      BL_Corner_Lip = new ModelRenderer(this, 0, 15);
      BL_Corner_Lip.addBox(-6F, 5F, -3F, 1, 1, 1);
      BL_Corner_Lip.setRotationPoint(0F, 16F, 0F);
      BL_Corner_Lip.setTextureSize(128, 128);
      BL_Corner_Lip.mirror = true;
      setRotation(BL_Corner_Lip, 0F, 0F, 0F);
      BR_Corner_Lip = new ModelRenderer(this, 0, 15);
      BR_Corner_Lip.addBox(5F, 5F, -3F, 1, 1, 1);
      BR_Corner_Lip.setRotationPoint(0F, 16F, 0F);
      BR_Corner_Lip.setTextureSize(128, 128);
      BR_Corner_Lip.mirror = true;
      setRotation(BR_Corner_Lip, 0F, 0F, 0F);
  }
  
  public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7)
  {
    super.render(par1Entity, par2, par3, par4, par5, par6, par7);
    setRotationAngles(par2, par3, par4, par5, par6, par7, par1Entity);
    Segment_1.render(par7);
    Segment_2.render(par7);
    Segment_3.render(par7);
    Segment_4.render(par7);
    Segment_5.render(par7);
    Segment_6.render(par7);
    Tail_Middle.render(par7);
    Tail_End_1.render(par7);
    Tail_End_2.render(par7);
    Tail_End_3.render(par7);
    Spike_1.render(par7);
    Spike_2.render(par7);
    Spike_3.render(par7);
    Spike_4.render(par7);
    Spike_5.render(par7);
    Spike_6.render(par7);
    Bottom_Lip.render(par7);
    Tooth_Left_B.render(par7);
    Tooth_Leftt_M.render(par7);
    Tooth_Left_T.render(par7);
    Tooth_BR.render(par7);
    Tooth_BNR.render(par7);
    Tooth_BNL.render(par7);
    Tooth_BL.render(par7);
    Tooth_Right_B.render(par7);
    Tooth_Right_M.render(par7);
    Tooth_Right_T.render(par7);
    Tooth_TR.render(par7);
    Tooth_TNR.render(par7);
    Tooth_TNL.render(par7);
    Tooth_TL.render(par7);
    Left_Gum.render(par7);
    Right_Gum.render(par7);
    Bottom_Gum.render(par7);
    Upper_Gum.render(par7);
    Throat.render(par7);
    Top_Lip.render(par7);
    Right_Eye.render(par7);
    Left_Eye.render(par7);
    Right_Lip.render(par7);
    Right_Cheek.render(par7);
    Left_Cheek.render(par7);
    Top_Cheek.render(par7);
    Head.render(par7);
    Bottom_Left_Corner.render(par7);
    Bottom_Right_Corner.render(par7);
    Top_Right_Corner.render(par7);
    Top_Left_Corner.render(par7);
    Bottom_Chunk.render(par7);
    Right_Chunk.render(par7);
    Left_Chunk.render(par7);
    Top_Chunk.render(par7);
    Left_Lip.render(par7);
    TL_Corner_Lip.render(par7);
    TR_Corner_Lip.render(par7);
    BL_Corner_Lip.render(par7);
    BR_Corner_Lip.render(par7);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity)
  {
      this.Segment_1.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Segment_1.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Segment_1.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Segment_1.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Segment_2.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Segment_2.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Segment_3.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Segment_3.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Segment_4.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Segment_4.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Segment_5.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Segment_5.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Segment_6.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Segment_6.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Spike_1.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Spike_1.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      //----------
      this.Spike_2.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Spike_2.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Spike_3.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Spike_3.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Spike_4.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Spike_4.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Spike_5.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Spike_5.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Spike_6.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Spike_6.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Tail_Middle.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Tail_Middle.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Tail_End_1.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Tail_End_1.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Tail_End_2.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Tail_End_2.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Tail_End_3.rotateAngleY = MathHelper.cos(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.05F * (float)(1 + Math.abs(par2 - 2));
      this.Tail_End_3.rotationPointX = MathHelper.sin(par3 * 0.9F + (float)par2 * 0.15F * (float)Math.PI) * (float)Math.PI * 0.2F * (float)Math.abs(par2 - 2);
      this.Right_Eye.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Right_Eye.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.Left_Eye.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Left_Eye.rotateAngleY = par4 / (180F / (float)Math.PI);
      
       
      
      //-------------------

      
      
  }

}
